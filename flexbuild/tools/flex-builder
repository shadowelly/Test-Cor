#!/bin/bash

# BSD LICENSE
#
# Copyright 2017 NXP
#
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of NXP nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#
# Author: Shengzhou Liu <shengzhou.liu@nxp.com>
#

set -e

# set default env
JOBS=16
ARCH=arm64
DESTARCH=arm64
FBVERSION=1.3.1712

usage () {
cat <<EOF
Usage:
flex-builder <option>

option:
 -m, --machine	       target machine, supports ls1012ardb, ls1012afrdm, ls1021atwr, ls1043ardb, ls1046ardb,
                       ls1088ardb, ls2088ardb, etc, default all machines if unspecified
 -a, --arch	       target architect of processor, valid argument: 'arm64', 'arm32', default arm64 if unspecified
 -b, --boottype	       type of boot media, valid argument: 'nor', 'sd', 'qspi', 'nand', default all types if unspecified
 -j, --jobs	       number of parallel build jobs, default 16 if unspecified
 -c, --component       specify single or all components to build, valid argument:
     linux             build linux component
     uboot             build uboot component
     fmc               build fmc component
                       alike all other valid component(e.g. ppa, rcw, restool, dpdk, odp, etc) can be built separately
     firmware          build all firmware components (ppa, rcw, uboot, uefi, fm-ucode, qe-ucode, mc-utils, etc)
     apps              build all apps components (restool, flib, fmlib, fmc, cst, openssl, odp, ofp, dpdk, ovs-dpdk,
                       aiopsl, ceetm, gpp-aioptool, qbman, ptpd, crconf, etc)
 -f, --cfgfile         specify config file, default build_lsdk.cfg is used if unspecified
 -B, --buildarg        secondary build argument for misc build commands
 -i, --instruction     instruction to generate target packages/images or manage component repositories, valid argument:
     mkfw              generate composite firmware image for the specified type of nor/qspi/sd boot
     mkallfw           generate all composite firmware in all nor/qspi/sd boottype for non-secure and secure boot
     mkitb             generate flex_linux_<arch>.itb
     mkbootpartition   generate boot partition tarball including kernel, dtb, composite firmware, autoboot script, etc
     mkrfs             generate raw distro rootfs without custom components
     mkguestrfs        convert raw distro rootfs to ext4 rootfs used for qemu guest
     mkdistroscr       generate distro autoboot script for all machines
     signimg           sign images and secure boot headers for specified machine
     merge-component   merge custom component packages and kernel modules into distro rootfs
     autobuild-all     autobuild all firmware, kernel, distro userland with apps components for single or all <arch> platforms
     distclean         clean all generated images except distro rootfs
     clean-apps        clean all generated packages of apps components
     clean-distrorfs   clean distro rootfs
     compressrfs       compress distro rootfs as .tgz
     compressapps      compress apps components as .tgz
     repo-fetch        fetch single or all git repositories if not present locally
     repo-branch       set single or all git repositories to specified branch
     repo-update       update single or all git repositories to latest HEAD
     repo-commit       set single or all git repositories to specified commit
     repo-tag          set single or all git repositories to specified tag
     repo-change       change git repo tree and branch
     list              list enabled config, machines and components
 -s, --secure          enable secure boot option used for generating composite firmware
 -e, --encapsulation   enable encapsulation and decapsulation feature for secure boot
 -v, --version         print the version
 -h, --help	       print help info

 for example:
 flex-builder -i autobuild-all -m <machine>           # autobuild all firmware, kernel, userland for specified platform
 flex-builder -i mkrfs -a <arch>                      # generate distro rootfs without custom components
 flex-builder -i mkbootpartition -a <arch>            # generate boot partition tarball for all <arch> platforms
 flex-builder -i merge-component -a <arch>            # merge all components packages and kernel modules into target distro rootfs
 flex-builder -i repo-fetch                           # fetch git repositories of all components
 flex-builder -i repo-update                          # update all git repositories to latest HEAD
 flex-builder -c ppa-optee -m ls1046ardb              # build ppa with OPTEE enabled for ls1046ardb
 flex-builder -c uboot -m ls1043ardb -b sd            # build uboot for ls1043ardb to generate sd boot image
 flex-builder -c uboot -m all		              # build uboot with all sd/nor/qspi boottype for all machines
 flex-builder -c linux -a <arch>		      # build linux for all <arch> machines
 flex-builder -c firmware -m <machine>	              # build all firmware for <machine> into build/firmware
 flex-builder -c apps -a <arch>		              # build all apps components into build/images/components_<arch>
 flex-builder -i mkfw -m ls1043ardb -b sd -B uboot -s # generate uboot-based composite firmware for SD secure boot on ls1043ardb
 flex-builder -i mkfw -m ls2088ardb -b nor -B uefi    # generate uefi-based composite firmware for NOR boot on ls2088ardb
 flex-builder -i signimg -m ls1046ardb -b sd          # sign images and secure boot headers for secure boot on ls1046ardb
 flex-builder -i mkguestrfs -a <arch> -B 3G           # convert raw distro rootfs to ext4 rootfs used for qemu guest
 flex-builder -i mkitb -a <arch>	              # generate flex_linux_<arch>.itb used for all <arch> machines
 flex-builder -i mkallfw -m ls1046ardb -b sd	      # generate all images(including uboot-based, uefi-based, secureboot) for sd boot
 flex-builder -i autobuild-all -a <arch>              # autobuild all firmware, kernel, userland for all <arch> platforms
 flex-builder all				      # autobuild all firmware, kernel, userland for all arm64+arm32 platforms
 flex-builder docker                                  # create or attach to docker container and run flexbuild in docker
 flex-builder distclean				      # clean all generated images except distro rootfs

EOF
   exit
}


check_build_toolchain() {
    if [ $DESTARCH = arm32 ] && [ $hostarch = x86_64 -o $hostarch = aarch64 -o $hostarch = i686 ]; then
	if ! which arm-linux-gnueabihf-gcc 1>/dev/null; then
	    sudo apt-get install -y crossbuild-essential-armhf gcc-arm-linux-gnueabihf
	fi
	export ARCH=arm
	export CROSS_COMPILE=arm-linux-gnueabihf-
    elif [ $DESTARCH = arm64 ] && [ $hostarch = x86_64 -o $hostarch = armv7l -o $hostarch = i686 ]; then
	if ! which aarch64-linux-gnu-gcc 1>/dev/null; then
	    sudo apt-get install -y crossbuild-essential-arm64 gcc-aarch64-linux-gnu
	fi
	export ARCH=arm64
	export CROSS_COMPILE=aarch64-linux-gnu-
    elif [ $hostarch = aarch64 -o $hostarch = armv7l ]; then
	if [ $DESTARCH = arm32 ]; then
	    export ARCH=arm
	else
	    export ARCH=$DESTARCH
	fi
	export CROSS_COMPILE=
    fi
}


generate_qoriq_composite_firmware() {
    # generate machine-specific firmware to be programmed to NOR/SD media
    # $1: machine name
    # $2: boot type: nor, sd, qspi, nand
    # $3: bootloader type: uboot or uefi

    echo "Generating $2boot composite firmware image for $1 ..."

    if [ ! -f $TOPDIR/manifest/$1.manifest ]; then
	echo $TOPDIR/manifest/$1.manifest unpresent!
	exit 1
    fi
    . $TOPDIR/manifest/$1.manifest

    if [ ! -d $TOPDIR/build/images ]; then
	mkdir -p $TOPDIR/build/images
    fi

    if [ "$SECURE" = "y" ]; then
	fwimg=$TOPDIR/build/images/firmware_${1}_${3}_${BOOTTYPE}boot_secure
    else
	fwimg=$TOPDIR/build/images/firmware_${1}_${3}_${BOOTTYPE}boot
    fi

    if [ -f $fwimg ]; then
	rm -f $fwimg
    fi

    # 1. rcw and bootloader (u-boot/uefi)
    if [ "$SECURE" = "y" ]; then
	rcwimg=`eval echo '${'"rcw_""$2"'_sec}'`
	bootloaderimg=`eval echo '${'"$3"'_'"$2"'boot_sec}'`
    else
	rcwimg=`eval echo '${'"rcw_""$2"'}'`
	bootloaderimg=`eval echo '${'"$3"'_'"$2"'boot}'`
    fi

    if [ "$bootloaderimg" = "null" -o -z "$bootloaderimg" ]; then
	if [ "$SECURE" = "y" ]; then
	    echo ${3}_${2}boot_sec on $1: unsupported!
	else
	    echo ${3}_${2}boot on $1: unsupported!
	fi
	exit
    fi

    if [ -n "$bootloaderimg" -a ! -f $TOPDIR/$bootloaderimg ]; then
	echo $bootloaderimg unpresent, generating it ...
	flex-builder -c uboot -m $1 -f $CONFIGLIST
    fi

    if [ $2 = sd ] && [ $1 = ls1021atwr -o $1 = ls1043ardb -o $1 = ls1046ardb -o "$SECURE" = "y" ]; then
	# rcw and uboot/uefi in single image
	dd if=$TOPDIR/$bootloaderimg of=$fwimg bs=512 seek=$sd_rcw_bootloader_offset
    elif [ $2 = nand ] && [ $1 = ls1043ardb ]; then
	dd if=$TOPDIR/$bootloaderimg of=$fwimg bs=512 seek=0
    else
	# program rcw
	if [ -z "$rcwimg" ]; then exit; fi
	if [ ! -f $rcwimg ]; then
	    flex-builder -c rcw -f $CONFIGLIST
	fi
	if [ $2 = sd ]; then
	    dd if=$TOPDIR/$rcwimg of=$fwimg bs=512 seek=$sd_rcw_bootloader_offset
	else
	    dd if=$TOPDIR/$rcwimg of=$fwimg bs=1K seek=0
	fi

	# program uboot/uefi
	if [ $2 = nor -o $2 = qspi ]; then
	    val=`expr $(echo $(($nor_bootloader_offset))) / 1024`
	    dd if=$TOPDIR/$bootloaderimg of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$bootloaderimg of=$fwimg bs=512 seek=$sd_bootloader_offset
	fi
    fi

    # 2. bootloader environment varialbe
    if [ $3 = uefi ] ; then
	if [ "$uefi_env" != "null" -a -n "$uefi_env" ]; then
	    if [ $2 = nor -o $2 = qspi ]; then
		val=`expr $(echo $(($nor_bootloader_env_offset))) / 1024`
		dd if=$TOPDIR/$uefi_env of=$fwimg bs=1K seek=$val
	    elif [ $2 = sd ]; then
		dd if=$TOPDIR/$uefi_env of=$fwimg bs=512 seek=$sd_bootloader_env_offset
	    fi
	fi
    fi

    # 3. ppa firmware
    if [ "$ppa" != "null" -a -n "$ppa" ]; then
	if [ ! -f $ppa ]; then
	    echo $ppa unpresent, generating it ...
	    flex-builder -c ppa -m $1 -f $CONFIGLIST
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_ppa_offset))) / 1024`
	    dd if=$TOPDIR/$ppa of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$ppa of=$fwimg bs=512 seek=$sd_ppa_offset
	fi
    fi

    # 4. secure boot headers
    secureboot_headers=`eval echo '${'"secureboot_headers_""$2"'}'`
    if [ "$secureboot_headers" != null -a -n "$secureboot_headers" ] && [ "$SECURE" = "y" ]; then
	if [ ! -f $TOPDIR/$uboot_scr ]; then
	    flex-builder -i mkdistroscr -m $1 -a $DESTARCH -f $CONFIGLIST
	fi
	if [ ! -f $TOPDIR/$secureboot_headers ]; then
	    flex-builder -i signimg -m $1 -b $2 -a $DESTARCH -f $CONFIGLIST
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_secureboot_headers_offset))) / 1024`
	    dd if=$TOPDIR/$secureboot_headers of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$secureboot_headers of=$fwimg bs=512 seek=$sd_secureboot_headers_offset
	fi
    fi

    # 5. DPAA1 FMan ucode firmware
    if [ "$fman_ucode" != "null" -a -n "$fman_ucode" ]; then
	if [ ! -f $TOPDIR/$fman_ucode ]; then
	    flex-builder -c bin-firmware -f $CONFIGLIST
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_fman_ucode_offset))) / 1024`
	    dd if=$TOPDIR/$fman_ucode of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$fman_ucode of=$fwimg bs=512 seek=$sd_fman_ucode_offset
	fi
    fi

    # 6. QE/uQE firmware
    if [ "$qe_firmware" != "null" -a -n "$qe_firmware" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_qe_firmware_offset))) / 1024`
	    dd if=$TOPDIR/$qe_firmware of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$qe_firmware of=$fwimg bs=512 seek=$sd_qe_firmware_offset
	fi
    fi

    # 7. ethernet phy firmware
    if [ "$phy_firmware" != "null" -a -n "$phy_firmware" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_phy_firmware_offset))) / 1024`
	    dd if=$TOPDIR/$phy_firmware of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$phy_firmware of=$fwimg bs=512 seek=$sd_phy_firmware_offset
	fi
    fi

    # 8. reserved

    # 9. DPAA2-MC or PFE firmware
    if [ "$dpaa2_mc_fw" != "null" -a -n "$dpaa2_mc_fw" ] ; then
	fwbin=`ls $TOPDIR/$dpaa2_mc_fw`
    elif [ "$pfe_fw" != "null" -a -n "$pfe_fw" ] ; then
	fwbin=$TOPDIR/$pfe_fw
    fi
    if [ -n "$fwbin" ]; then
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_dpaa2_mc_fw_offset))) / 1024`
	    dd if=$fwbin of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$fwbin of=$fwimg bs=512 seek=$sd_dpaa2_mc_fw_offset
	fi
    fi

    # 10. DPAA2 DPL firmware
    if [ "$dpaa2_mc_dpl" != "null" -a -n "$dpaa2_mc_dpl" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_dpaa2_mc_dpl_offset))) / 1024`
	    dd if=$TOPDIR/$dpaa2_mc_dpl of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$dpaa2_mc_dpl of=$fwimg bs=512 seek=$sd_dpaa2_mc_dpl_offset
	fi
    fi

    # 11. DPAA2 DPC firmware
    if [ "$dpaa2_mc_dpc" != "null" -a -n "$dpaa2_mc_dpc" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_dpaa2_mc_dpc_offset))) / 1024`
	    dd if=$TOPDIR/$dpaa2_mc_dpc of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$dpaa2_mc_dpc of=$fwimg bs=512 seek=$sd_dpaa2_mc_dpc_offset
	fi
    fi

    # 12. device tree image
    if [ "$device_tree" != "null" -a -n "$device_tree" ] ; then
	if [ $DESTARCH = arm32 ]; then
	    device_tree=`echo $device_tree | sed "s/arm64/arm32/g"`
	fi
	if [ ! -f $TOPDIR/$device_tree ]; then
	    echo $device_tree unpresent, building it ...
	    if echo $device_tree | grep ls1021a; then
		flex-builder -c linux -a arm32 -m ls1021atwr -f $CONFIGLIST
	    elif [ $DESTARCH = arm64 ]; then
		flex-builder -c linux -a arm64 -f $CONFIGLIST
	    elif [ $DESTARCH = arm32 ]; then
		flex-builder -c linux -a arm32 -f $CONFIGLIST
	    fi
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_device_tree_offset))) / 1024`
	    dd if=$TOPDIR/$device_tree of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$device_tree of=$fwimg bs=512 seek=$sd_device_tree_offset
	fi
    fi

    # 13. linux kernel image
    if [ $DESTARCH = arm32 ] && [ $1 = ls1043ardb -o $1 = ls1046ardb -o $1 = ls1012ardb -o $1 = ls1012afrdm ]; then
        kernel_img=`echo $kernel_img | sed "s/arm64/arm32/g"`
	kernel_img=`echo $kernel_img | sed "s/Image/uImage.v8/g"`
    fi
    if [ ! -f $TOPDIR/$kernel_img ]; then
	generate_kernel_img
    fi
    if [ "$kernelrfs_continuous" != "yes" ]; then
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_kernel_offset))) / 1024`
	    dd if=$TOPDIR/$kernel_img of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$kernel_img of=$fwimg bs=512 seek=$sd_kernel_offset
	fi
    else
	kernel_itb=$TOPDIR/build/images/flex_linux_${DESTARCH}.itb
	if [ ! -f ${kernel_itb} ]; then
	    echo ${kernel_itb} unpresent, generating it ...
	    if echo ${kernel_itb} | grep 'arm32.itb'; then
		flex-builder -i mkitb -a arm32 -f $CONFIGLIST
	    else
		flex-builder -i mkitb -a arm64 -f $CONFIGLIST
	    fi
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_kernel_offset))) / 1024`
	    dd if=${kernel_itb} of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=${kernel_itb} of=$fwimg bs=512 seek=$sd_kernel_offset
	fi
    fi

    # 14. ramdisk rfs image
    if [ "$kernelrfs_continuous" != "yes" ]; then
	if [ ! -f $TOPDIR/$ramdiskrfs  ]; then
	    if [ $DESTARCH = arm32 ]; then
		ARCHNAME=arm
	    else
		ARCHNAME=arm64
	    fi
	    if [ ! -f $TOPDIR/packages/installer/ramdiskrfs/ramdisk_rootfs_$DESTARCH.ext4.gz ]; then
		echo packages/installer/ramdiskrfs/ramdisk_rootfs_$DESTARCH.ext4.gz not found
		exit
	    fi
	    mkimage -n 'u-boot ext4 ramdisk rfs' -A $ARCHNAME -O linux -T ramdisk -C gzip -d \
	    $TOPDIR/packages/installer/ramdiskrfs/ramdisk_rootfs_$DESTARCH.ext4.gz \
	    $TOPDIR/build/images/ramdisk_rootfs_$DESTARCH.ext4.gz.uboot
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_ramdiskrfs_offset))) / 1024`
	    dd if=$TOPDIR/$ramdiskrfs of=$fwimg bs=1K seek=$val
	elif [ $2 = sd ]; then
	    dd if=$TOPDIR/$ramdiskrfs of=$fwimg bs=512 seek=$sd_ramdiskrfs_offset
	fi
    fi
    if [ $2 = sd ]; then
	tail -c +4097 $fwimg > $fwimg.img && rm $fwimg
    else
	mv $fwimg $fwimg.img
    fi
    echo -e "$fwimg.img   [Done]\n"
}


generate_linux_itb() {
    if [ ! -f $TOPDIR/${kernel_img}.gz ] && [ $DESTARCH = arm64 ]; then
	echo "$kernel_img unpresent, building it ..."
	flex-builder -c linux -a arm64 -f $CONFIGLIST
    fi
    if [ ! -f $TOPDIR/build/linux/kernel/arm32/uImage.v7 -a $DESTARCH = arm32 ]; then
	echo "uImage.v7 unpresent, building it ..."
	flex-builder -c linux -a arm32 -m ls1021atwr -f $CONFIGLIST
    fi
    if [ ! -f $TOPDIR/build/linux/kernel/arm32/uImage.v8 -a $DESTARCH = arm32 ]; then
	echo "uImage.v8 unpresent, building it ..."
	flex-builder -c linux -a arm32 -f $CONFIGLIST
    fi
    if [ ! -d $TOPDIR/packages/installer/ramdiskrfs ]; then
	make distroinstaller
    fi
    cd $TOPDIR/packages/installer/ramdiskrfs
    if [ ! -f ramdisk_rootfs_${DESTARCH}.ext4.gz ]; then
	echo ramdisk_rootfs_${DESTARCH}.ext4.gz not found
	exit
    fi
    if [ ! -d $TOPDIR/build/images ]; then
	mkdir -p $TOPDIR/build/images
    fi
    cd -
    mkimage -f $TOPDIR/packages/installer/linux_${DESTARCH}.its $TOPDIR/build/images/flex_linux_${DESTARCH}.itb
    echo $TOPDIR/build/images/flex_linux_${DESTARCH}.itb  [Done]
}

generate_distro_bootscr() {
    # $1: machine name
    if [ ! -f $TOPDIR/manifest/$1.manifest ]; then
	echo $1.manifest not found
	exit
    fi
    if [ "$ENCAP" = "y" ] ; then
	    if [ -z $KEY_ID ] ; then
		KEY_ID=0x12345678123456781234567812345678
	    fi
	    if [ ${#KEY_ID} -gt 34 ]; then
		echo "Key ID should be of 16 bytes"; exit;
	    else
		if [ ${KEY_ID:0:2} != 0x ]; then
		     echo "Improper format! Should start with 0x "; exit;
		fi
	    fi
	    while [[  ${#KEY_ID} != 34 ]];do
		KEY_ID=${KEY_ID:0:2}0${KEY_ID:2}
	    done
	    echo $KEY_ID
	    key_id_1=${KEY_ID:2:8}
	    key_id_2=${KEY_ID:10:8}
	    key_id_3=${KEY_ID:18:8}
	    key_id_4=${KEY_ID:26:8}
    fi
    . $TOPDIR/manifest/$1.manifest
    if [ ! -d $TOPDIR/build/firmware/u-boot/$1 ]; then
	mkdir -p $TOPDIR/build/firmware/u-boot/$1
    fi
    if [ -n "$uboot_scr" -a "$uboot_scr" != "null" ] ; then
	if [ -n "$securevalidate" ]; then
            if [ "$ENCAP" = "y" ] ; then
                if [ $bootscript_dec != null ] ; then
                    echo $securevalidate_dec > $bootscript_dec.tmp
                    if [ $DESTARCH = arm32 ] && [ $1 = ls1043ardb -o $1 = ls1046ardb -o $1 = ls1012ardb -o $1 = ls1012afrdm ]; then
			echo $distroboot | sed -e 's/Image/uImage.v8/g' -e 's/booti/bootm/g' >> $TOPDIR/$uboot_scr.tmp
			sed -i 's/booti/bootm/g' $bootscript_dec.tmp
                    else
                        echo $distroboot >> $bootscript_dec.tmp
                    fi
		    mkimage -A arm64 -O linux -T script -C none -a 0 -e 0  -n "boot.scr" \
			    -d $TOPDIR/$bootscript_dec.tmp $TOPDIR/$bootscript_dec
                    rm -f $TOPDIR/$bootscript_dec.tmp
                fi
                echo $securevalidate_enc > $TOPDIR/$uboot_scr.tmp
            else
                echo $securevalidate > $TOPDIR/$uboot_scr.tmp
            fi	
	fi
	if [ $DESTARCH = arm32 ] && [ $1 = ls1043ardb -o $1 = ls1046ardb -o $1 = ls1012ardb -o $1 = ls1012afrdm ]; then
	    echo $distroboot | sed -e 's/Image/uImage.v8/g' -e 's/booti/bootm/g' >> $TOPDIR/$uboot_scr.tmp
	else
	    echo $distroboot >> $TOPDIR/$uboot_scr.tmp
	fi
	mkimage -A arm64 -O linux -T script -C none -a 0 -e 0  -n "boot.scr" -d $TOPDIR/$uboot_scr.tmp $TOPDIR/$uboot_scr
	rm -f $TOPDIR/$uboot_scr.tmp
	echo -e "$uboot_scr    [Done]\n"
    fi
}

generate_uefi_grub_cfg() {
    for brd in $uefi_machine_list; do
	if [ ! -f $TOPDIR/manifest/$brd.manifest ]; then
	    echo $brd.manifest not found
	    continue
	fi
	stra=`grep 'uefi_grub_search' $TOPDIR/manifest/$brd.manifest | cut -d'"' -f2`
	strb=`grep 'uefi_grub_linux' $TOPDIR/manifest/$brd.manifest | cut -d'"' -f2`
	if [ ! -d $TOPDIR/build/firmware/uefi/$brd ]; then
	    mkdir -p $TOPDIR/build/firmware/uefi/$brd
	fi
	filename=$TOPDIR/build/firmware/uefi/$brd/${brd}_grub.cfg
	echo set default=\"1\" >  $filename
	echo set timeout=10  >> $filename
	echo "menuentry 'LSDK on QorIQ ARM64 $brd' {" >> $filename
	echo "	""$stra" >> $filename
	echo "	""$strb" >> $filename
	echo "}" >> $filename
    done
}

generate_bootpartition_tarball() {
    # fill stuff for boot partition used by uboot or uefi
    if [ ! -f $TOPDIR/build/images/flex_linux_$DESTARCH.itb ]; then
	flex-builder -i mkitb -a $DESTARCH -f $CONFIGLIST
    fi
    if  [ ! -f $TOPDIR/build/linux/kernel/arm32/uImage.v7 -a $DESTARCH = arm32 ] ; then
	echo zImage.v7 unpresent, generating it
	export MACHINE=ls1021atwr && . manifest/ls1021atwr.manifest && generate_kernel_img
    fi
    if  [ ! -f $TOPDIR/build/linux/kernel/arm32/uImage.v8 -a $DESTARCH = arm32 ] ; then
	echo zImage.v8 unpresent, generating it
	export MACHINE=ls1043ardb && . manifest/ls1043ardb.manifest && generate_kernel_img
    fi
    if [ ! -f $TOPDIR/$kernel_img -a $DESTARCH = arm64 ]; then
	echo $kernel_img unpresent, generating it
	generate_kernel_img
    fi
    if [ ! -d $TOPDIR/build/images/bootpartition_$DESTARCH ]; then
	mkdir -p $TOPDIR/build/images/bootpartition_$DESTARCH
    fi
    cp $TOPDIR/build/images/flex_linux_$DESTARCH.itb $TOPDIR/build/images/bootpartition_$DESTARCH/
    curbrch=`cd $KERNEL_PATH && git branch -v | grep '^*' | cut -d' ' -f2 && cd $TOPDIR`
    if [ $DESTARCH = arm64 -a ! -f $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release ]; then
	flex-builder -c linux -f $CONFIGLIST
    elif [ $DESTARCH = arm32 -a ! -f $KERNEL_OUTPUT_PATH/$curbrch/v7/include/config/kernel.release ]; then
	flex-builder -c linux -a arm32 -m ls1021atwr -f $CONFIGLIST
    fi
    if [ $DESTARCH = arm32 ]; then
	cp $TOPDIR/build/linux/kernel/arm32/uImage.v* $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/arm32/zImage.v* $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/arm32/config-* $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/arm32/System.map* $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/$DESTARCH/*ls1*.dtb $TOPDIR/build/images/bootpartition_$DESTARCH
	kernelrelease=$(cat $KERNEL_OUTPUT_PATH/$curbrch/v7/include/config/kernel.release)
    elif [ $DESTARCH = arm64 ]; then
	cp $TOPDIR/$kernel_img $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/$kernel_img.gz $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/arm64/config-* $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/arm64/System.map* $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/arm64/vmlinuz* $TOPDIR/build/images/bootpartition_$DESTARCH
	cp $TOPDIR/build/linux/kernel/$DESTARCH/*.dtb $TOPDIR/build/images/bootpartition_$DESTARCH
	kernelrelease=$(cat $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release)
    fi
    cd $TOPDIR/build/linux/kernel/$DESTARCH/lib/modules
    for moddir in `ls | grep ^[0-9]`; do
	rm -f $moddir/{build,source}
	tar cvzf ${DESTARCH}-modules-${moddir}.tgz $moddir
    done
    mv ${DESTARCH}-modules-*.tgz $TOPDIR/build/images
    cd $TOPDIR
    if [ ! -f $TOPDIR/$uboot_scr ]; then
	echo $TOPDIR/$uboot_scr unpresent, generate it ...
	flex-builder -i mkdistroscr -a $DESTARCH -f $CONFIGLIST
    fi
    find $TOPDIR/build/firmware/u-boot/ -name "*boot.scr" | xargs -I {} cp {} $TOPDIR/build/images/bootpartition_$DESTARCH
    generate_uefi_grub_cfg
    mkdir -p $TOPDIR/build/images/bootpartition_$DESTARCH/grub
    find  $TOPDIR/build/firmware/uefi/ -name "*grub.cfg" | xargs -I {} cp {} $TOPDIR/build/images/bootpartition_$DESTARCH/grub
    if [ ! -f $TOPDIR/build/firmware/uefi/grub/BOOTAA64.EFI ]; then
	flex-builder -c uefi -f $CONFIGLIST
    fi
    cp $TOPDIR/build/firmware/uefi/grub/BOOTAA64.EFI $TOPDIR/build/images/bootpartition_$DESTARCH/grub
    if [ ! -f $TOPDIR/packages/installer/ramdiskrfs/ramdisk_rootfs_${DESTARCH}.ext4.gz ]; then
	echo ramdisk_rootfs_${DESTARCH}.ext4.gz unpresent
	make distroinstaller
    fi
    if [ ! -f $TOPDIR/build/images/ramdisk_rootfs_${DESTARCH}.ext4.gz.uboot ]; then
	if [ $DESTARCH = arm32 ]; then
	    archname=arm
	elif [ $DESTARCH = arm64 ]; then
	    archname=arm64
	fi
	mkimage -n 'u-boot ext2 ramdisk rfs' -A $archname -O linux -T ramdisk -C gzip -d \
	$TOPDIR/packages/installer/ramdiskrfs/ramdisk_rootfs_$DESTARCH.ext4.gz \
	$TOPDIR/build/images/ramdisk_rootfs_$DESTARCH.ext4.gz.uboot
    fi
    cp $TOPDIR/packages/installer/ramdiskrfs/ramdisk_rootfs_${DESTARCH}.ext4.gz $TOPDIR/build/images/bootpartition_$DESTARCH
    cp $TOPDIR/build/images/ramdisk_rootfs_${DESTARCH}.ext4.gz.uboot $TOPDIR/build/images/bootpartition_$DESTARCH

    if [ "$SECURE" = "y" ] && [ -d $TOPDIR/build/firmware/secboot_hdrs ]; then
	cp -rf $TOPDIR/build/firmware/secboot_hdrs $TOPDIR/build/images/bootpartition_$DESTARCH
	cp -f $TOPDIR/build/firmware/secboot_hdrs/*/*bs.out $TOPDIR/build/images/bootpartition_$DESTARCH
    fi

    if [ $DESTARCH = arm64 ]; then
	if [ -f $TOPDIR/build/images/firmware_ls1012afrdm_uboot_qspiboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls1012afrdm_uboot_qspiboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1012ardb_uboot_qspiboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls1012ardb_uboot_qspiboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1043ardb_uboot_norboot.img ]; then
	    cp -f build/images/firmware_ls1043ardb_uboot_norboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1046ardb_uboot_qspiboot.img ]; then
	    cp -f build/images/firmware_ls1046ardb_uboot_qspiboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1088ardb_uboot_qspiboot.img ]; then
	    cp -f build/images/firmware_ls1088ardb_uboot_qspiboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls2088ardb_uboot_norboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls2088ardb_uboot_norboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	rm -f $TOPDIR/build/images/bootpartition_$DESTARCH/*ls1021*
    fi
    if [ $DESTARCH = arm32 ]; then
	if [ -f $TOPDIR/build/images/firmware_ls1021atwr_uboot_norboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls1021atwr_uboot_norboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1012ardb_uboot_qspiboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls1012ardb_uboot_qspiboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1012afrdm_uboot_qspiboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls1012afrdm_uboot_qspiboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1043ardb_uboot_norboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls1043ardb_uboot_norboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	if [ -f $TOPDIR/build/images/firmware_ls1046ardb_uboot_qspiboot.img ]; then
	    cp -f $TOPDIR/build/images/firmware_ls1046ardb_uboot_qspiboot*.img $TOPDIR/build/images/bootpartition_$DESTARCH
	fi
	rm -f $TOPDIR/build/images/bootpartition_$DESTARCH/*{ls1088,ls2088}*
    fi
    if [ -f $TOPDIR/build/images/srk_hash.txt ]; then
	cp $TOPDIR/build/images/srk_hash.txt $TOPDIR/build/images/bootpartition_$DESTARCH
    fi
    cd $TOPDIR/build/images/bootpartition_$DESTARCH
    boottarball=bootpartition_${DESTARCH}_lts_${kernelrelease:0:3}_`date +%Y%m%d%H%M`.tgz
    tar czf ../$boottarball *
    cd $TOPDIR/build/images
    if [ -d bootpartition_${DESTARCH}_lts_${kernelrelease:0:3} ]; then
	rm -rf bootpartition_${DESTARCH}_lts_${kernelrelease:0:3}
    fi
    mv bootpartition_$DESTARCH bootpartition_${DESTARCH}_lts_${kernelrelease:0:3}
    ln -sf $boottarball bootpartition_${DESTARCH}_lts_${kernelrelease:0:3}.tgz
    cd $TOPDIR
    echo $TOPDIR/build/images/$boottarball  [Done]
}

generate_distrorfs() {
    if [ $DESTARCH = arm64 ]; then
	tarch=arm64
    elif [ $DESTARCH = arm32 ]; then
	tarch=armhf
    fi
    if [ "$DISTROTYPE" = "ubuntu" -a -f $RFSDIR/usr/aptpkg/.rfsblddone ]; then
	echo $RFSDIR already exists!
	exit 0
    fi
    if [ "$DISTROTYPE" = "ubuntu" -a -d $RFSDIR -a ! -f $RFSDIR/usr/aptpkg/.rfsblddone ]; then
	echo $RFSDIR/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d exist but imcomplete, regenerate it ...
	sudo rm -rf $RFSDIR/*
    fi
    mkdir -p $RFSDIR
    echo "setup ${DISTROTYPE}_${CODENAME}_${DESTARCH} rootfs ..."
    if [ "$FETCH_PREBUILT_ROOTFS" = "y" -a "$DISTROTYPE" = "ubuntu" ]; then
	set +e
	curl -C - -f $prebuilt_rfs_url/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.tgz \
	     -o $RFSDIR/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.tgz
	var=`echo $?`
	set -e
	if [ $var = 0 ]; then
	    echo Extracting ${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.tgz, waiting ...
	    sudo tar xf $RFSDIR/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.tgz -C $RFSDIR
	    var=`echo $?`
	    if [ $var = 0 ]; then
		rm -f $RFSDIR/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.tgz
	    fi
	else
	    echo Failed to download prebuilt $prebuilt_rfs_url/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.tgz!
	    echo Building it from scratch ...
	    if [ -n "$BUILDARG" ]; then
		flex-mkdistrorfs $tarch $CODENAME ${BUILDARG}
	    else
		flex-mkdistrorfs $tarch $CODENAME
	    fi
	fi
    else
	if [ -n "$BUILDARG" ]; then
	    flex-mkdistrorfs $tarch $CODENAME ${BUILDARG}
	else
	    flex-mkdistrorfs $tarch $CODENAME
	fi
    fi

    if [ "$UDEV_RULES_QORIQ_NI_REMAP" = "y" ] && \
       [ -d $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d/etc/udev/rules.d ]; then
	sudo cp -f packages/udev/udev-rules-qoriq/72-fsl-dpaa-persistent-networking.rules \
	$TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d/etc/udev/rules.d
    fi
    echo $RFSDIR    [Done]
}

generate_guest_ext4rfs() {
    if [ -n "$BUILDARG" ]; then
	size=$BUILDARG
    else
	size=3G
    fi
    if [ ! -f $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d/etc/fstab ]; then
	echo $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs unpresent, generating it ..
	flex-builder -i mkrfs -a $DESTARCH -f $CONFIGLIST
    fi
    echo Creating $size build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img, waiting ..
    qemu-img create -f raw $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img $size
    if mount | grep $TOPDIR/build/images/gstrfsmnt; then
	sudo umount $TOPDIR/build/images/gstrfsmnt
    fi
    mkfs.ext4 -F $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img
    mkdir -p $TOPDIR/build/images/gstrfsmnt
    if ! mount | grep $TOPDIR/build/images/gstrfsmnt; then
	sudo mount -o loop $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img \
	           $TOPDIR/build/images/gstrfsmnt
    fi
    sudo cp -a $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d/. $TOPDIR/build/images/gstrfsmnt/
    if mount | grep $TOPDIR/build/images/gstrfsmnt; then
	sudo umount $TOPDIR/build/images/gstrfsmnt
    fi
    rm -rf $TOPDIR/build/images/gstrfsmnt
    echo $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img  [Done]
    echo compressing build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img, waiting ..
    tar czf $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img.gz \
    $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img
    echo $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.ext4.img.tgz  [Done]
}

compress_distrorfs() {
    if [ -f $RFSDIR/proc/uptime ]; then
	sudo chroot $RFSDIR umount /proc
    fi
    cd $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d
    tarballname=${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs_`date +%Y%m%d%H%M`.tgz
    echo packing $tarballname, waiting ...
    sudo tar czf ../$tarballname *
    cd $TOPDIR/build/images
    ln -sf $tarballname ${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.tgz
    cd $TOPDIR
    echo $TOPDIR/build/images/$tarballname  [Done]
}

compress_appcomponents() {
    cd $TOPDIR/build/images
    echo packing build/images/components_$DESTARCH.tgz, waiting ...
    sudo tar czf components_$DESTARCH.tgz  components_$DESTARCH
    cd -
    echo $TOPDIR/build/images/components_$DESTARCH.tgz  [Done]
}

merge_components() {
    if [ ! -d $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d ]; then
	echo $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d unpresent, generating it ..
	generate_distrorfs
    fi
    if [ ! -f $TOPDIR/build/images/components_$DESTARCH/usr/local/bin/restool ]; then
	echo components packages unpresent, building it ..
	flex-builder -c apps -a ${DESTARCH} -f $CONFIGLIST
    fi

    # install kernel modules
    libmodules=$TOPDIR/build/linux/kernel/$DESTARCH/lib/modules
    if [ -d $libmodules ]; then
	rm -f $TOPDIR/$libmodules/*/{build,source}
	if [ ! -d $RFSDIR/lib/modules ]; then
	    sudo mkdir -p $RFSDIR/lib/modules
	fi
	sudo cp -rf $libmodules/* $RFSDIR/lib/modules
	sudo rm -f $RFSDIR/lib/modules/*.tgz
    fi

    #install PFE firmware to $RFSDIR/lib/firmware
    if [ $CONFIG_MACHINE_LS1012ARDB = y -o $CONFIG_MACHINE_LS1012AFRDM = y ]; then
	if [ ! -f $TOPDIR/build/firmware/qoriq-engine-pfe-bin/ls1012a/slow_path/ppfe_class_ls1012a.elf ]; then
	    flex-builder -c qoriq-engine-pfe-bin
	fi
	sudo mkdir -p $RFSDIR/lib/firmware
	. $TOPDIR/manifest/ls1012ardb.manifest
	sudo cp -f $TOPDIR/$pfe_kernel $RFSDIR/lib/firmware/
	cd $RFSDIR/lib
	tar cvzf $TOPDIR/build/images/linux-lib-firmware.tgz firmware
	cd $TOPDIR
    fi

    if [ -f $TOPDIR/build/linux/kernel/$DESTARCH/perf ]; then
        sudo cp -f $TOPDIR/build/linux/kernel/$DESTARCH/perf $RFSDIR/usr/bin
    fi

    sudo cp -rf $TOPDIR/build/images/components_$DESTARCH/* $RFSDIR/

    echo merged apps components into $TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d  [Done]
}

git_repo_update() {
    if [ -n "$BUILDARG" ]; then
	if ! grep repo_list $TOPDIR/configs/$CONFIGLIST | grep $BUILDARG 1>/dev/null; then
	    echo invalid repo name: $BUILDARG; exit
	fi
	reponame=`echo $BUILDARG | sed 's/-/_/g'`
	branch=`grep -E "^${reponame}_branch" $TOPDIR/configs/$CONFIGLIST | cut -d= -f2`
	commit=`grep -E "^${reponame}_commit" $TOPDIR/configs/$CONFIGLIST | cut -d= -f2`
	tag=`grep -E "^${reponame}_tag" $TOPDIR/configs/$CONFIGLIST | cut -d= -f2`
    fi
    pkgdirlist="firmware linux apps installer"
    for pdn in $pkgdirlist; do
	if [ $1 = fetch ]; then
	    if [ -n "$BUILDARG" ]; then
		repolist=`eval echo '${'"$pdn"'_repo_list}'`
		if ! echo $repolist | grep $BUILDARG 1>/dev/null; then continue; fi
		if [ -n "$branch" ]; then
		    git_repo_checkout $TOPDIR/packages/$pdn $BUILDARG branch $branch
		elif [ -n "$tag" ]; then
		    git_repo_checkout $TOPDIR/packages/$pdn $BUILDARG tag $tag
		elif [ -n "$commit" ]; then
		    git_repo_checkout $TOPDIR/packages/$pdn $BUILDARG commit $commit
		fi
	    else
		make -C $TOPDIR/packages/$pdn repo_fetch
	    fi
	elif [ $1 = latest ]; then
	    if [ -n "$BUILDARG" -a -z "$branch" ]; then
		echo branch of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" -a -n "$branch" ] && [ -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		cd $TOPDIR/packages/$pdn/$BUILDARG && git pull origin $branch && git fetch --tags && cd -
	    elif [ -n "$BUILDARG" ] && [ ! -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		continue;
	    else
		make -C $TOPDIR/packages/$pdn repo_update_latest
	    fi
	elif [ $1 = commit ]; then
	    if [ -n "$BUILDARG" -a -z "$commit" ]; then
		echo commit of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" ] && [ ! -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		continue;
	    elif [ -n "$BUILDARG" -a -n "$commit" ] && [ -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		git_repo_checkout $TOPDIR/packages/$pdn $BUILDARG commit $commit
	    else
		make -C $TOPDIR/packages/$pdn repo_update_commit
	    fi
	elif [ $1 = tag ]; then
	    if [ -n "$BUILDARG" -a -z "$tag" ]; then
		echo tag of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" ] && [ ! -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		continue;
	    elif [ -n "$BUILDARG" -a -n "$tag" ] && [ -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		git_repo_checkout packages/$pdn $BUILDARG tag $tag
	    else
		make -C $TOPDIR/packages/$pdn repo_update_tag
	    fi
	elif [ $1 = branch ]; then
	    if [ -n "$BUILDARG" -a -z "$branch" ]; then
		echo branch of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" -a -n "$branch" ] && [ -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		git_repo_checkout $TOPDIR/packages/$pdn $BUILDARG branch $branch
	    elif [ -n "$BUILDARG" ] && [ ! -d $TOPDIR/packages/$pdn/$BUILDARG ]; then
		continue;
	    else
		make -C $TOPDIR/packages/$pdn repo_update_branch
	    fi
	fi
    done
}

git_repo_checkout() {
# $1:pkgdir, $2:gittree, $3:type of branch/tag/commit, $4:name of branch/tag/commit
    cd $1
    if [ ! -d $2 ]; then
	if [ $3 = branch ]; then
	    git clone $GIT_REPOSITORY_URL/$2 -b $4
	elif [ $3 = tag -o $3 = commit ]; then
	    git clone $GIT_REPOSITORY_URL/$2 && cd $2 && git checkout $4 -b $4
	fi
    else
	cd $2
	if ! git show-ref --verify --quiet refs/heads/$4; then
	    if [ $3 = branch ]; then
		git checkout remotes/origin/$4 -b $4
	    elif [ $3 = tag -o $3 = commit ]; then
		git checkout $4 -b $4
	    fi
	else
	    git checkout $4
	fi
    fi
    cd $TOPDIR
}

git_repo_change() {
    if [ -z "$BUILDARG" ]; then
	echo "please specify: -B <component>=<tree-name>,branch=<branch-name>"
	exit
    fi
    compnt=`echo $BUILDARG | cut -d= -f1`
    gittree=`echo $BUILDARG | cut -d= -f2 | cut -d, -f1`
    branch=`echo $BUILDARG | cut -d= -f3`

    if [ "$compnt" = "linux" ]; then
	KERNEL_TREE=$gittree
	KERNEL_BRANCH=$branch
	pkgdir=$TOPDIR/packages/linux
	tmppath=`realpath $TOPDIR/build/linux/kernel`
	if [ ${tmppath##*/} != $KERNEL_TREE ]; then
	    rm -f $TOPDIR/build/linux/kernel
	    ln -s $KERNEL_TREE $TOPDIR/build/linux/kernel
	fi
	if [ ! -d $TOPDIR/build/linux/$KERNEL_TREE ]; then
	    mkdir -p $TOPDIR/build/linux/$KERNEL_TREE
	fi
    elif [ "$compnt" = "uboot" ]; then
	UBOOT_TREE=$gittree
	UBOOT_BRANCH=$branch
	pkgdir=$TOPDIR/packages/firmware
    fi

    cd `realpath $TOPDIR/packages/*/$gittree`
    if git show-ref --verify --quiet refs/heads/$branch; then
	git checkout $branch
    else
	git checkout remotes/origin/$branch -b $branch
    fi
    cd -
}

check_binfmt_module() {
    if ! cat /proc/filesystems | grep binfmt_misc 1>/dev/null; then
	sudo modprobe binfmt_misc
    fi
}

flexbuild_launch_docker() {
    if ! docker ps -a | grep ${username}_${fbdockerrepo}_${lsdk_version}  1>/dev/null; then
	if ! docker ps -a | grep  ${username}/${fbdockerrepo}:${fbdockerimgversion} ; then
            cd $TOPDIR/docker/${fbdockerrepo:2}/${fbdockerimgversion} && make && cd -
	fi
	docker run -t -i -h fbubuntu --name="${username}_${fbdockerrepo}_${lsdk_version}" --privileged=true \
	       -v $TOPDIR:$TOPDIR -v /lib/modules:/lib/modules -e HOME=$TOPDIR \
	       -w $TOPDIR ${username}/${fbdockerrepo}:${fbdockerimgversion} /bin/bash
    elif docker ps -a | grep ${username}_${fbdockerrepo}_${lsdk_version} | grep Exited  1>/dev/null; then
	docker start ${username}_${fbdockerrepo}_${lsdk_version}
	docker attach ${username}_${fbdockerrepo}_${lsdk_version}
    else
	docker attach ${username}_${fbdockerrepo}_${lsdk_version}
    fi
}

generate_kernel_img() {
    if [ $DESTARCH = arm32 ]; then
	flex-builder -c linux -a arm32 -f $CONFIGLIST		      # for arm32-v8
	flex-builder -c linux -a arm32 -m ls1021atwr -f $CONFIGLIST   # for arm32-v7
	flex-builder -c cryptodev-linux -a arm32 -f $CONFIGLIST
	flex-builder -c cryptodev-linux -a arm32 -m ls1021atwr -f $CONFIGLIST
    elif [ $DESTARCH = arm64 ]; then
	flex-builder -c linux -a arm64 -f $CONFIGLIST	              # for arm64
	flex-builder -c cryptodev-linux -a arm64 -f $CONFIGLIST
    fi
    libmodules=$TOPDIR/build/linux/kernel/$DESTARCH/lib/modules
    module_name=$(echo `ls -t $libmodules` | cut -d' ' -f1)
    if [ -n "$module_name" ]; then
	export MODULES_PATH=$libmodules/$module_name
    fi
}

generate_qoriq_all_firmware() {
    if [ ! -f $TOPDIR/$kernel_img -a  $DESTARCH = arm64 ] || \
       [ ! -f $TOPDIR/build/linux/kernel/arm32/Image.v7 -a $DESTARCH = arm32 ]; then
	generate_kernel_img
    fi

    # build uboot, uefi, rcw, ppa, phy-firmware, mc-firmware for <machine>
    flex-builder -c firmware -m $MACHINE -a $DESTARCH -f $CONFIGLIST

    # generate uboot-based composite firmware
    for brd in $machinelist; do
	if [ $DESTARCH = arm64 -a $brd = ls1021atwr ]; then continue; fi
	if [ $DESTARCH = arm32 -a $brd != ls1021atwr -a $brd != ls1043ardb -a $brd != ls1046ardb \
	   -a $brd != ls1012ardb -a $brd != ls1012afrdm ]; then continue; fi
	for boottype in $boottypelist; do
	    if [ $brd = ls1012ardb -o $brd = ls1043ardb -o $brd = ls1046ardb ]; then
		flex-builder -c ppa-optee -m $brd -f $CONFIGLIST
	    fi
	    flex-builder -i mkfw -m $brd -b $boottype -B uboot -a $DESTARCH -f $CONFIGLIST
	done
    done

    # generate distro uboot bootscr
    for brd in $machinelist; do
	generate_distro_bootscr $brd
    done

    # sign images and generate secure boot headers for secureboot
    flex-builder -c cst -a $DESTARCH -f $CONFIGLIST
    for brd in $machinelist; do
	if [ $DESTARCH = arm64 -a $brd = ls1021atwr ]; then continue; fi
	if [ $DESTARCH = arm32 -a $brd != ls1021atwr -a $brd != ls1043ardb -a $brd != ls1046ardb \
	   -a $brd != ls1012ardb -a $brd != ls1012afrdm ]; then continue; fi
	for boottype in $boottypelist; do
	    flex-builder -i signimg -m $brd -b $boottype -a $DESTARCH -f $CONFIGLIST
	done
    done

    # generate uboot-based composite firmware with secureboot support
    for brd in $machinelist; do
	if [ $DESTARCH = arm64 -a $brd = ls1021atwr ]; then continue; fi
	if [ $DESTARCH = arm32 -a $brd != ls1021atwr -a $brd != ls1043ardb -a $brd != ls1046ardb \
	   -a $brd != ls1012ardb -a $brd != ls1012afrdm ]; then continue; fi
	for boottype in $boottypelist; do
	    flex-builder -i mkfw -m $brd -b $boottype -B uboot -s -a $DESTARCH -f $CONFIGLIST
	done
    done

    # generate UEFI-based composite firmware
    if [ $MACHINE = all ]; then
	uefibrdlist=$uefi_machine_list
    elif [ $MACHINE = ls1043ardb -o $MACHINE = ls1046ardb -o $MACHINE = ls2088ardb ]; then
	uefibrdlist=$MACHINE
    else
	uefibrdlist=""
    fi
    for brd in $uefibrdlist; do
	if [ $DESTARCH = arm32 ] && [ $brd != ls1043ardb -a $brd != ls1046ardb ]; then continue; fi
	for boottype in $boottypelist; do
	    if [ $brd = ls1012ardb -o $brd = ls1043ardb -o $brd = ls1046ardb ]; then
		# build PPA without OPTEE enabled
		flex-builder -c ppa -m $brd -f $CONFIGLIST
	    fi
	    flex-builder -i mkfw -m $brd -b $boottype -B uefi -a $DESTARCH -f $CONFIGLIST
	done
    done
    echo $DESTARCH: Build all composite firmware  [Done]
}

gen_distrorfs_apps() {
    if [ ! -f $RFSDIR/usr/aptpkg/.rfsblddone ]; then
	flex-builder -i mkrfs -a $DESTARCH -B additional_packages_list_full -f $CONFIGLIST
    fi

    flex-builder -c apps -a $DESTARCH -f $CONFIGLIST
    flex-builder -i compressapps -a $DESTARCH -f $CONFIGLIST
    flex-builder -i merge-component -a $DESTARCH -f $CONFIGLIST
    if [ $hostarch = x86_64 -o $hostarch = i686 ]; then
	flex-builder -i compressrfs -a $DESTARCH -f $CONFIGLIST
	if [ "$BUILD_GUESTRFS" = "y" ]; then
	    flex-builder -i mkguestrfs -a $DESTARCH -B 3G -f $CONFIGLIST
	fi
    fi

    echo $DESTARCH: Build $DISTROTYPE $CODENAME userland and apps components in $TOPDIR/build/images !  [Done]
}

flex_autobuild_all() {
    if [ -n "$BUILDARG" ]; then echo Warning: ignored invalid -B $BUILDARG for autobuild; unset BUILDARG; fi
    echo "Time of fetch/update repo: `date`"
    flex-builder -i repo-fetch -f $CONFIGLIST
    flex-builder -i repo-update -f $CONFIGLIST

    echo "Time of Start Build: `date`"
    starttime=`date +'%Y-%m-%d %H:%M:%S'`
    generate_kernel_img
    if [ "$BUILD_PERF" = "y" ]; then
	flex-builder -c perf -a $DESTARCH -f $CONFIGLIST
    fi
    generate_qoriq_all_firmware
    flex-builder -i mkbootpartition -a $DESTARCH -s -f $CONFIGLIST

    # optionally
    if [ "$BUILD_DUAL_KERNEL" = "y" ] && [ -d $KERNEL_PATH ]; then
	cd $KERNEL_PATH
	if [ -n "$secondary_linux_tag" ] && [ "`cat .git/HEAD | cut -d/ -f3`" != "$secondary_linux_tag" ]; then
	    echo swithing to $secondary_linux_tag ...
	    if git show-ref --verify --quiet refs/heads/$secondary_linux_tag; then
		git checkout $secondary_linux_tag
	    else
		git checkout $secondary_linux_tag -b $secondary_linux_tag
	    fi
	elif [ -n "$secondary_linux_branch" ] && [ "`cat .git/HEAD | cut -d/ -f3`" != "$secondary_linux_branch" ]; then
	    echo swithing to $secondary_linux_branch ...
            if git show-ref --verify --quiet refs/heads/$secondary_linux_branch; then
                git checkout $secondary_linux_branch
            else
                git checkout remotes/origin/$secondary_linux_branch -b $secondary_linux_branch
            fi
	fi
	cd -
	# build the second version of linux kernel
	generate_kernel_img
	if [ "$BUILD_PERF" = "y" ]; then
	    flex-builder -c perf -a $DESTARCH -f $CONFIGLIST
	fi
	for brd in $machinelist; do
	    if [ $DESTARCH = arm64 -a $brd = ls1021atwr ]; then continue; fi
	    if [ $DESTARCH = arm32 -a $brd != ls1021atwr -a $brd != ls1043ardb -a $brd != ls1046ardb \
	       -a $brd != ls1012ardb -a $brd != ls1012afrdm ]; then continue; fi
	    for boottype in $boottypelist; do
		flex-builder -i signimg -m $brd -b $boottype -a $DESTARCH -f $CONFIGLIST
	    done
	done

	flex-builder -i mkbootpartition -a $DESTARCH -s -f $CONFIGLIST
    fi

    # generate distrorfs and apps for all platforms
    gen_distrorfs_apps
    rm -rf $TOPDIR/build/images/bootpartition_$DESTARCH

    echo "Time of Build Done: `date`"
    endtime=`date +'%Y-%m-%d %H:%M:%S'`
    start_seconds=$(date --date="$starttime" +%s)
    end_seconds=$(date --date="$endtime" +%s)
    spent=$((end_seconds-start_seconds))
    mins=`expr $(echo $(($spent))) / 60`
    secs=`expr $(echo $(($spent))) % 60`
    echo "$DESTARCH Autobuild Time: $mins Mins $secs Secs !"
}

flex_autobuild_all_log() {
    flex-builder -i autobuild -a $DESTARCH -f $CONFIGLIST 2>&1 | tee autobuild-all-${DESTARCH}_`date +%Y%m%d%H%M`.log
}

secure_sign_image() {
    if ! echo $MACHINE_LIST | grep $1; then
	echo invalid machine name: $1
	exit
    fi
    . $TOPDIR/manifest/$1.manifest
    ubootimg=`eval echo '${'"uboot_""$2"'boot}'`
    if [ -z "$ubootimg" -o "$ubootimg" = "null" ] || [ ! `echo $ubootimg | grep $1` ]; then
	    echo ${2}boot on $1 unsupport!
	    exit
    fi
    if [ ! -d $TOPDIR/packages/apps/cst ]; then
        echo $TOPDIR/packages/apps/cst unpresent, build it ...
        flex-builder -c cst -a $DESTARCH -f $CONFIGLIST
    fi
    
    if [ ! -f $TOPDIR/$uboot_scr ]; then
        echo $TOPDIR/$uboot_scr unpresent, generate it ...
        flex-builder -i mkdistroscr -m $1 -a $DESTARCH -f $CONFIGLIST
    fi

    if [ $DESTARCH = arm64 ] && [ ! -f $TOPDIR/$kernel_img ]; then
        echo $TOPDIR/$kernel_img unpresent, generate it ...
	generate_kernel_img
    elif [ $DESTARCH = arm32 ] && [ ! -f $TOPDIR/build/linux/kernel/arm32/uImage.v7 ]; then
	echo $TOPDIR/build/linux/kernel/arm32/uImage.v7 unpresent, generate it ...
	generate_kernel_img
    fi

    echo "Signing $2boot images for $1 ..."
    if [ "$ENCAP" = "y" ]; then
        cp $TOPDIR/$bootscript_dec $TOPDIR/packages/apps/cst/bootscript_dec && echo "Copying bootscript_decap"
    fi
    cp $TOPDIR/$uboot_scr $TOPDIR/packages/apps/cst/bootscript && echo "Copying bootscript"
    if [ $DESTARCH = arm32 ]; then
	device_tree=`echo $device_tree | sed "s/arm64/arm32/g"`
    fi
    cp $TOPDIR/$device_tree $TOPDIR/packages/apps/cst/uImage.dtb && echo "Copying dtb"
    cp $TOPDIR/build/images/flex_linux_${DESTARCH}.itb $TOPDIR/packages/apps/cst/kernel.itb && echo "Copying kernel_itb"
    
    if [ $1 = ls1043ardb -o $1 = ls1046ardb -o $1 = ls1012ardb -o $1 = ls1012afrdm ] && [ $DESTARCH = arm32 ]; then
	kernelimg=$TOPDIR/build/linux/kernel/arm32/uImage.v8
    else
	kernelimg=$TOPDIR/$kernel_img
    fi
    cp $kernelimg $TOPDIR/packages/apps/cst/uImage.bin && echo "Copying kernel"

    rcwimg_sec=`eval echo '${'"rcw_""$2"'_sec}'`
    rcwimg_nonsec=`eval echo '${'"rcw_""$2"'}'`
    if [ $2 = nor -o $2 = qspi ] ; then
	if [ -z "$rcwimg_sec" -o "$rcwimg_sec" = "null" ]; then
	    echo ${2}boot on $1 for secureboot unsupported!
	    exit
	elif [ ! -f $TOPDIR/$rcwimg_sec ]; then
	    echo $TOPDIR/$rcwimg_sec unpresent, building it...
	    flex-builder -c rcw -f $CONFIGLIST
	fi
        if [ $1 = ls2088ardb -o $1 = ls1088ardb ] ; then
	    if [ -z "$rcwimg_nonsec" -o "$rcwimg_nonsec" = "null" ]; then
	        echo ${2}boot on $1 not unsupported!
	        exit
	    fi
            cp $TOPDIR/$rcwimg_nonsec $TOPDIR/packages/apps/cst/rcw.bin
        fi
        ubootimg_sec=`eval echo '${'"uboot_""$2"'boot_sec}'`
        if [ -z "$ubootimg_sec" -o "$ubootimg_sec" = "null" ]; then
	    echo ${2}boot on $1 for secureboot unsupported
	    exit
	fi
	if  [ ! -f $TOPDIR/$ubootimg_sec ]; then
	    cd $TOPDIR; flex-builder -c u-boot -m $1 -b $2 -f $CONFIGLIST ; cd -
	fi
        cp $TOPDIR/$ubootimg_sec $TOPDIR/packages/apps/cst/u-boot-dtb.bin
    elif [ $2 = sd ] ; then
	  if [ $1 = ls1088ardb -o $1 = ls2088ardb ] ; then
	    if [ -z "$rcwimg_nonsec" -o "$rcwimg_nonsec" = "null" ]; then
	        echo ${2}boot on $1 not unsupported!
	        exit
	    fi
	    cp $TOPDIR/$rcwimg_nonsec $TOPDIR/packages/apps/cst/rcw.bin
	  fi
          if [ "$uboot_sdboot_sec" = "null" -o -z "$uboot_sdboot_sec" ]; then
	      echo ${2}boot on $1 for secureboot unsupported
	      exit
	  fi
          cp $TOPDIR/$uboot_sdboot_sec $TOPDIR/packages/apps/cst/u-boot-with-spl-pbl.bin
          cp $TOPDIR/$uboot_spl $TOPDIR/packages/apps/cst/u-boot-spl.bin
          cp $TOPDIR/$uboot_dtb $TOPDIR/packages/apps/cst/u-boot-dtb.bin
    fi
    
    if [ -f $TOPDIR/$ppa ] ; then
        cp $TOPDIR/$ppa $TOPDIR/packages/apps/cst/ && echo "Copying PPA"
    fi
    
    if [ -f $TOPDIR/$dpaa2_mc_fw ] ; then
        cp $TOPDIR/$dpaa2_mc_fw $TOPDIR/packages/apps/cst/mc.itb
    fi
    
    if [ -f $TOPDIR/$dpaa2_mc_dpc ] ; then
        cp $TOPDIR/$dpaa2_mc_dpc $TOPDIR/packages/apps/cst/dpc.dtb
    fi
    
    if [ -f $TOPDIR/$dpaa2_mc_dpl ] ; then
        cp $TOPDIR/$dpaa2_mc_dpl $TOPDIR/packages/apps/cst/dpl.dtb
    fi
    
    if [ ! -d  $TOPDIR/build/firmware/secboot_hdrs/$1 ] ; then
        mkdir -p  $TOPDIR/build/firmware/secboot_hdrs/$1
    fi
    cd $TOPDIR/packages/apps/cst/
    if [ $2 = nand -a -n "$nand_script" ] ; then
        . $nand_script
    elif [ $2 = sd -a -n "$sd_script" ] ; then
        . $sd_script
    elif [ $2 = nor -a -n "$nor_script" ] ; then
        . $nor_script
    elif [ $2 = qspi -a -n "$qspi_script" ] ; then
        . $qspi_script
    fi
    
    if [ $2 = sd ] ; then
        if [  $1 = ls2088ardb -o $1 = ls1088ardb ] ; then
            cp $TOPDIR/packages/apps/cst/rcw_sec.bin $TOPDIR/$uboot_sdboot_sec
        else
            cp $TOPDIR/packages/apps/cst/u-boot-with-spl-pbl-sec.bin $TOPDIR/$uboot_sdboot_sec
        fi
    elif [ $2 = nand ]; then
        cp $TOPDIR/packages/apps/cst/u-boot-with-spl-pbl-sec.bin $TOPDIR/$uboot_nandboot_sec
    else
        if [ $1 = ls2088ardb -o $1 = ls1088ardb ] && [ -f $TOPDIR/packages/apps/cst/rcw_sec.bin ]; then
            cp $TOPDIR/packages/apps/cst/rcw_sec.bin $TOPDIR/$rcwimg_sec
        fi
    fi

    cp $TOPDIR/packages/apps/cst/secboot_hdrs_${2}boot.bin $TOPDIR/build/firmware/secboot_hdrs/$1
    cp $TOPDIR/packages/apps/cst/hdr_dtb.out $TOPDIR/build/firmware/secboot_hdrs/$1
    cp $TOPDIR/packages/apps/cst/hdr_linux.out $TOPDIR/build/firmware/secboot_hdrs/$1
    cp $TOPDIR/packages/apps/cst/hdr_bs.out $TOPDIR/build/firmware/secboot_hdrs/$1/hdr_${1}_bs.out
    cp $TOPDIR/packages/apps/cst/srk_hash.txt $TOPDIR/build/images
    cp $TOPDIR/packages/apps/cst/srk.pri $TOPDIR/build/images
    cp $TOPDIR/packages/apps/cst/srk.pub $TOPDIR/build/images
    if [ "$ENCAP" = "y" ]; then
	cp $TOPDIR/packages/apps/cst/hdr_bs_dec.out $TOPDIR/build/firmware/secboot_hdrs/$1/hdr_${1}_bs_dec.out
    fi
}

check_machine_boottype() {
    if [ -z $BOOTTYPE ]; then
	echo "please specify -b parameter for BOOTTPYE"
	exit 1
    fi
    if [ $BOOTTYPE != sd -a $BOOTTYPE != nor -a $BOOTTYPE != qspi -a $BOOTTYPE != nand ]; then
	echo valid parameter of '-b': sd, nor, qspi, nand
	exit 1
    fi
}

do_distclean() {
    rm -rf $TOPDIR/build/firmware
    rm -rf $TOPDIR/build/linux
    rm -rf $TOPDIR/build/images/bootpartition*
    rm -rf $TOPDIR/build/images/components*
    rm -f $TOPDIR/build/images/*.img
    rm -f $TOPDIR/build/images/*.itb
    rm -f $TOPDIR/build/images/*.tgz
    rm -f $TOPDIR/build/images/*.gz*
    rm -f $TOPDIR/build/images/srk*
    sudo rm -rf $RFSDIR/lib/modules/*
    echo clean all generated images except distro rootfs [Done]
}

show_lists() {
    echo -e "\nBuild Config:"
    echo -e "\t$CONFIGLIST"
    echo -e "\nMachine List:"
    echo -e "\t$MACHINE_LIST"
    echo -e "\nComponent List:"
    echo -e "\t$COMPONENT_LIST"
}

username=`whoami`
hostarch=`uname -m`

if [ $# -eq 0 ]; then
    usage
    exit
fi


ARGS=`getopt -a -o m:j:a:b:c:f:i:B:sekvh -l machine:,jobs:,arch:,boottype:,component:,cfgfile:,instruction:,buildarg:,secure,encap,keyid:,version,help -- "$@"`
[ $? -ne 0 ] && usage
eval set -- "${ARGS}"
while true
do
	case "$1" in
	-m|--machine)
		MACHINE=$2
		echo "MACHINE: $MACHINE"
		shift
		;;
	-j|--jobs)
		JOBS=$2
		echo JOBS: $JOBS
		shift
		;;
	-a|--arch)
		DESTARCH=$2
		echo "DESTARCH: $DESTARCH"
		shift
		;;
	-b|boottype)
		BOOTTYPE=$2
		echo "BOOTTYPE: $BOOTTYPE"
		shift
		;;
	-c|--component)
		COMPONENT=$2
		echo "COMPONENT: $COMPONENT"
		shift
		;;
        -f|--cfgfile)
                CONFIGLIST=$2
		if [ ! -f $TOPDIR/configs/$CONFIGLIST ]; then
		    echo ERROR: $TOPDIR/configs/$CONFIGLIST does not exist!
		    exit 1
		fi
                echo "CONFIGLIST: $2"
                shift
                ;;
	-i|--instruction)
		INSTRUCTION=$2
		echo "INSTRUCTION: $INSTRUCTION"
		shift
		;;
	-B|--buildarg)
		BUILDARG=$2
		echo "BUILDARG: $BUILDARG"
		shift
		;;
	-s|--secure)
		SECURE=y
		echo "SECURE: $SECURE"
		;;
	-e|--encap)
		ENCAP=y
		echo "ENCAP: $ENCAP"
		;;
	-k|--keyid)
		KEY_ID=$2
		echo "KEY_ID: $KEY_ID"
		shift
		;;
	-v|--version)
		echo $FBVERSION
		exit
		;;
	-h|--help)
		usage
		;;
	--)
		shift
		break
		;;
	esac
shift
done

if [ -z "$MACHINE" ]; then
    MACHINE=all
fi
if [ "$MACHINE" = "ls1021atwr" -a $DESTARCH != arm32 ]; then
    DESTARCH=arm32
fi

if [ -z "$manifest" ]; then
    if [ -f $TOPDIR/manifest/$MACHINE.manifest ]; then
	manifest=$TOPDIR/manifest/$MACHINE.manifest
    elif [ -z "$MACHINE" -o $MACHINE = all ] && [ $DESTARCH = arm32 ]; then
	manifest=$TOPDIR/manifest/ls1021atwr.manifest
    elif [ -f $TOPDIR/manifest/ls1043ardb.manifest ]; then
	manifest=$TOPDIR/manifest/ls1043ardb.manifest
    else
	echo "not found manifest file"
	exit 1
    fi
fi
. $manifest
. $TOPDIR/manifest/memorylayout.manifest

if [ $DESTARCH != arm64 -a $DESTARCH != arm32 ]; then
    echo invalid parameter for -a !
    exit 1
fi
mkdir -p $TOPDIR/build/images/components_$DESTARCH/etc
mkdir -p $TOPDIR/build/images/components_$DESTARCH/usr/{bin,include}
mkdir -p $TOPDIR/build/images/components_$DESTARCH/usr/local/{bin,include}
mkdir -p $TOPDIR/build/firmware

if [ $DESTARCH = arm32 ]; then
    mkdir -p $TOPDIR/build/images/bootpartition_arm32
else
    mkdir -p $TOPDIR/build/images/bootpartition_arm64
fi

if [ -z "$CONFIGLIST" ]; then
    if [ -f $TOPDIR/configs/build_custom.cfg ]; then
	CONFIGLIST=build_custom.cfg
    elif [ -f $TOPDIR/configs/build_lsdk_internal.cfg ]; then
	CONFIGLIST=build_lsdk_internal.cfg
    else
	CONFIGLIST=build_lsdk.cfg
    fi
fi

. $TOPDIR/configs/$CONFIGLIST
export CONFIGLIST

if [ -n "$CONFIG_KERNEL_TREE" ]; then
    KERNEL_TREE=$CONFIG_KERNEL_TREE
    KERNEL_BRANCH=$CONFIG_KERNEL_BRANCH
else
    KERNEL_TREE=$default_linux_tree
    KERNEL_BRANCH=$default_linux_branch
fi

if [ -n "$CONFIG_UBOOT_TREE" ]; then
    UBOOT_TREE=$CONFIG_UBOOT_TREE
    UBOOT_BRANCH=$CONFIG_UBOOT_BRANCH
else
    UBOOT_TREE=$default_uboot_tree
    UBOOT_BRANCH=$default_uboot_branch
fi

KERNEL_PATH=$TOPDIR/packages/linux/$KERNEL_TREE
KERNEL_OUTPUT_PATH=$TOPDIR/build/linux/$KERNEL_TREE/$DESTARCH/output
INSTALL_MOD_PATH=$TOPDIR/build/linux/kernel/$DESTARCH

MACHINE_LIST=`grep  CONFIG_MACHINE_  $TOPDIR/configs/$CONFIGLIST | grep y | cut -d_ -f3 | cut -d= -f1 | tr A-Z a-z | tr "\n" " "`
COMPONENT_LIST=`grep  CONFIG_BUILD_  $TOPDIR/configs/$CONFIGLIST | grep y | cut -d_ -f3 | cut -d= -f1 | tr A-Z a-z | tr "\n" " "`

FIRMWARE_REPO_LIST=$firmware_repo_list
APPS_REPO_LIST=$apps_repo_list

#set default distro if unspecified in build cfg file
if [ -z "$DISTROTYPE" ]; then
    DISTROTYPE=ubuntu
fi
if [ -z "CODENAME" ]; then
    CODENAME=xenial
fi

DESTDIR=$TOPDIR/build/images/components_$DESTARCH
RFSDIR=$TOPDIR/build/images/${DISTROTYPE}_${CODENAME}_${DESTARCH}_rootfs.d

if [ ! $(echo $JOBS | grep '^[0-9]\{1,2\}$' | grep '^[1-9]') ]; then
   echo "invalid parameter $JOBS for JOBS, valid range: 1 to 99"
   exit 1
fi

case $COMPONENT in
    uboot|firmware)
	if [ -z $MACHINE ] ;then
	    echo "please specify -m parameter (machine name or all)"
	    exit 1
	fi
	;;
    *)
       ;;
esac


if [ ! -z $MACHINE ]; then
    if [ ${MACHINE:0:6} = ls1021 ]; then
	export ARCH=arm
	export DESTARCH=arm32
    fi
fi

if [ $DESTARCH = arm32 ]; then
    export ARCH=arm
fi


if [ $DESTARCH = arm64 ]; then
    KERNEL_CFG=$linux_config_list_arm64
elif [ "$MACHINE" = "ls1021atwr" ]; then
    KERNEL_CFG=$linux_config_list_arm32v7
else
    KERNEL_CFG=$linux_config_list_arm32v8
fi

if [ ! -d $TOPDIR/build/linux ]; then
    mkdir -p $TOPDIR/build/linux
fi

if [ ! -L $TOPDIR/build/linux/kernel ]; then
    ln -s $KERNEL_TREE $TOPDIR/build/linux/kernel
fi

if [ "$1" = "docker" ]; then
    if ! which docker 1>/dev/null 2>&1; then
	echo Error: make sure docker is installed properly on the host machine firstly!
	exit
    fi
    if ! docker ps  1>/dev/null 2>&1; then
	echo Error: make sure \'docker ps\' working firstly!
	exit
    fi
    check_binfmt_module
    if [ ! -b /dev/loop0 ]; then
	sudo losetup -f
    fi
    flexbuild_launch_docker
    exit
fi


if ! grep Ubuntu  /etc/issue  1>/dev/null; then
    if [ "$1" != "docker" ]; then
	echo "ERROR: This host is not based on Ubuntu distro, please install docker and run 'flex-builder docker' to build in Docker"
	exit
    fi
fi

localversion=$(grep Ubuntu /etc/issue | cut -d' ' -f2)
minversion=16.04
result=$(echo "${localversion:0:5} < $minversion" | bc)
if [ $result -eq 1 ]; then
    echo "ERROR: The version of distro on this host is older than Ubuntu 16.04, please upgrade it or install docker and run 'flex-builder docker' to build in Docker"
    exit
fi


dependent_pkg="git u-boot-tools device-tree-compiler autoconf automake dh-autoreconf libssl-dev openssl python-pip flex bison bc qemu-utils libncurses5-dev python-crypto"
for pkg in $dependent_pkg; do
    if ! dpkg-query -l $pkg | grep ii 1>/dev/null; then
	echo installing $pkg ..
	sudo apt-get -y install $pkg
    fi
done

#install python lib six depended by building ovs-dpdk
if ! pip show -q six; then
    echo installing python lib six
    pip install six
fi

tmppath=`realpath $TOPDIR/build/linux/kernel`
if [ ${tmppath##*/} != $KERNEL_TREE ]; then
    rm -f $TOPDIR/build/linux/kernel
    ln -s $KERNEL_TREE $TOPDIR/build/linux/kernel
fi

if ! which tclsh 1>/dev/null; then
    sudo apt-get -y install tclsh
fi

if [ -z "$MACHINE" ]; then
    MACHINE=all
fi

if [ $MACHINE = all ]; then
    machinelist=$MACHINE_LIST
else
    machinelist=$MACHINE
fi
if [ -z $BOOTTYPE ]; then
    boottypelist="sd nor qspi nand"
elif [ $BOOTTYPE != sd -a $BOOTTYPE != nor -a $BOOTTYPE != qspi -a $BOOTTYPE != nand ]; then
    echo invalid boottype:$BOOTTYPE!
    exit 1
else
    boottypelist=$BOOTTYPE
fi

case $BUILDARG in
    verbose)
	MAKE_FLAGS=-w
	;;
    quiet)
	MAKE_FLAGS=-s
	;;
    keep-going)
	MAKE_FLAGS=-k
	;;
esac

MAKE="make $MAKE_FLAGS"

export ARCH DESTARCH CROSS_COMPILE TOPDIR DESTDIR RFSDIR JOBS COMPONENT MACHINE KERNEL_TREE KERNEL_BRANCH \
       KERNEL_PATH UBOOT_TREE UBOOT_BRANCH BUILDARG MAKE MAKE_FLAGS KERNEL_CFG INSTALL_MOD_PATH MACHINE_LIST \
       COMPONENT_LIST FIRMWARE_REPO_LIST APPS_REPO_LIST BOOTTYPE DISTROTYPE

case "$INSTRUCTION" in
    "repo-fetch")
	git_repo_update fetch
	exit ;;
    "repo-update")
	git_repo_update latest
	exit ;;
    "repo-commit")
	git_repo_update commit
	exit ;;
    "repo-tag")
	git_repo_update tag
	exit ;;
    "repo-branch")
	git_repo_update branch
	exit ;;
    "repo-change")
	git_repo_change
	exit ;;
esac

check_build_toolchain

if [ "$1" = "all" ]; then
    flex-builder -i autobuild-all -a arm32 -f $CONFIGLIST
    flex-builder -i autobuild-all -a arm64 -f $CONFIGLIST
    exit
elif [ "$1" = "distclean" ]; then
    do_distclean
    exit
fi


case "$INSTRUCTION" in
    "mkfw")
	check_machine_boottype
	if [ -z "$BUILDARG" ]; then
	    echo "please specify -B uboot|uefi !"
	    exit
	fi
        if [ "$MACHINE" = "all" ]; then
	    for brd in $MACHINE_LIST; do
		. $TOPDIR/manifest/${brd}.manifest
		generate_qoriq_composite_firmware $brd $BOOTTYPE $BUILDARG
	    done
        else
	    generate_qoriq_composite_firmware $MACHINE $BOOTTYPE $BUILDARG
        fi
	exit ;;
    "mkallfw")
	generate_qoriq_all_firmware
	exit ;;
    "mkdistroscr")
	if [ "$MACHINE" = "all" ]; then
	    brdlist=$MACHINE_LIST
	else
	    brdlist=$MACHINE
	fi
	for brd in $brdlist; do
	    generate_distro_bootscr $brd
	done
	exit ;;
    "signimg")
	check_machine_boottype
	secure_sign_image $MACHINE $BOOTTYPE
	exit ;;
    "mkrfs")
	generate_distrorfs
	exit ;;
    "mkguestrfs")
	generate_guest_ext4rfs
	exit ;;
    "compressrfs")
	compress_distrorfs
	exit ;;
    "compressapps")
	compress_appcomponents
	exit ;;
    "mkitb")
	generate_linux_itb
	exit ;;
    "mkbootpartition")
	generate_bootpartition_tarball
	exit ;;
    "autobuild")
	flex_autobuild_all
	exit ;;
    "autobuild-all")
	flex_autobuild_all_log
	exit ;;
    "clean-distrorfs")
	if [ -d $RFSDIR ]; then
	    sudo rm -rf $RFSDIR
	    echo clean distro $RFSDIR [Done]
	fi
	exit ;;
    "clean-apps")
	if [ -d $TOPDIR/build/images/components_$DESTARCH ]; then
	    rm -rf $TOPDIR/build/images/components_$DESTARCH
	    echo clean $TOPDIR/build/images/components_$DESTARCH [Done]
	fi
	exit ;;
    "distclean")
	do_distclean
	exit ;;
    "merge-component")
	merge_components
	exit ;;
    "list")
	show_lists
	exit ;;
    *)
	if [ -n "$INSTRUCTION" ]; then
	    echo invalid instruction
	    exit
	fi
	;;
esac

case $COMPONENT in
    uboot|u-boot)
	make -C $TOPDIR uboot
	;;
    linux|Linux|kernel)
	make -C $TOPDIR linux
	;;
    $COMPONENT)
	if [ -z "$COMPONENT" ]; then
	    echo invalid instruction!
	    exit
	fi
	make -C $TOPDIR $COMPONENT
	;;
    *)
	exit
	;;
esac
